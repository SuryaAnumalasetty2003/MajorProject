{
  "$schema": "http://json.schemastore.org/sarif-1.0.0",
  "version": "1.0.0",
  "runs": [
    {
      "tool": {
        "name": "Microsoft (R) Visual C# Compiler",
        "version": "4.14.0.0",
        "fileVersion": "4.14.0-3.25279.5 (995f12b6)",
        "semanticVersion": "4.14.0",
        "language": "en-US"
      },
      "results": [
        {
          "ruleId": "CS8600",
          "level": "warning",
          "message": "Converting null literal or possible null value to non-nullable type.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/ParkingLotAllocationSystem/BackendProjectTests/Service/Implementation/VehicleServiceTests.cs",
                "region": {
                  "startLine": 55,
                  "startColumn": 83,
                  "endLine": 55,
                  "endColumn": 96
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8620",
          "level": "warning",
          "message": "Argument of type 'ISetup<IvehicleRepository, Task<Vehicle>>' cannot be used for parameter 'mock' of type 'IReturns<IvehicleRepository, Task<Vehicle?>>' in 'IReturnsResult<IvehicleRepository> ReturnsExtensions.ReturnsAsync<IvehicleRepository, Vehicle?>(IReturns<IvehicleRepository, Task<Vehicle?>> mock, Vehicle? value)' due to differences in the nullability of reference types.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/ParkingLotAllocationSystem/BackendProjectTests/Service/Implementation/VehicleServiceTests.cs",
                "region": {
                  "startLine": 55,
                  "startColumn": 12,
                  "endLine": 55,
                  "endColumn": 69
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8600",
          "level": "warning",
          "message": "Converting null literal or possible null value to non-nullable type.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/ParkingLotAllocationSystem/BackendProjectTests/Service/Implementation/ParkingAllocationServiceTests.cs",
                "region": {
                  "startLine": 61,
                  "startColumn": 36,
                  "endLine": 61,
                  "endColumn": 59
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8620",
          "level": "warning",
          "message": "Argument of type 'ISetup<IGenericRepository<ParkingAllocation>, Task<ParkingAllocation>>' cannot be used for parameter 'mock' of type 'IReturns<IGenericRepository<ParkingAllocation>, Task<ParkingAllocation?>>' in 'IReturnsResult<IGenericRepository<ParkingAllocation>> ReturnsExtensions.ReturnsAsync<IGenericRepository<ParkingAllocation>, ParkingAllocation?>(IReturns<IGenericRepository<ParkingAllocation>, Task<ParkingAllocation?>> mock, ParkingAllocation? value)' due to differences in the nullability of reference types.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/ParkingLotAllocationSystem/BackendProjectTests/Service/Implementation/ParkingAllocationServiceTests.cs",
                "region": {
                  "startLine": 60,
                  "startColumn": 13,
                  "endLine": 60,
                  "endColumn": 120
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8600",
          "level": "warning",
          "message": "Converting null literal or possible null value to non-nullable type.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/ParkingLotAllocationSystem/BackendProjectTests/Controllers/ParkingAllocationsControllerTests.cs",
                "region": {
                  "startLine": 65,
                  "startColumn": 69,
                  "endLine": 65,
                  "endColumn": 99
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8620",
          "level": "warning",
          "message": "Argument of type 'ISetup<IParkingAllocationService, Task<ParkingAllocationReadDto>>' cannot be used for parameter 'mock' of type 'IReturns<IParkingAllocationService, Task<ParkingAllocationReadDto?>>' in 'IReturnsResult<IParkingAllocationService> ReturnsExtensions.ReturnsAsync<IParkingAllocationService, ParkingAllocationReadDto?>(IReturns<IParkingAllocationService, Task<ParkingAllocationReadDto?>> mock, ParkingAllocationReadDto? value)' due to differences in the nullability of reference types.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/ParkingLotAllocationSystem/BackendProjectTests/Controllers/ParkingAllocationsControllerTests.cs",
                "region": {
                  "startLine": 65,
                  "startColumn": 13,
                  "endLine": 65,
                  "endColumn": 55
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8620",
          "level": "warning",
          "message": "Argument of type 'ISetup<IGenericRepository<ParkingLot>, Task<ParkingLot>>' cannot be used for parameter 'mock' of type 'IReturns<IGenericRepository<ParkingLot>, Task<ParkingLot?>>' in 'IReturnsResult<IGenericRepository<ParkingLot>> ReturnsExtensions.ReturnsAsync<IGenericRepository<ParkingLot>, ParkingLot?>(IReturns<IGenericRepository<ParkingLot>, Task<ParkingLot?>> mock, ParkingLot? value)' due to differences in the nullability of reference types.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/ParkingLotAllocationSystem/BackendProjectTests/Service/Implementation/ParkingLotServiceTests.cs",
                "region": {
                  "startLine": 92,
                  "startColumn": 13,
                  "endLine": 92,
                  "endColumn": 52
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8600",
          "level": "warning",
          "message": "Converting null literal or possible null value to non-nullable type.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/ParkingLotAllocationSystem/BackendProjectTests/Controllers/ParkingLotsControllerTests.cs",
                "region": {
                  "startLine": 66,
                  "startColumn": 69,
                  "endLine": 66,
                  "endColumn": 92
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8620",
          "level": "warning",
          "message": "Argument of type 'ISetup<IParkingLotService, Task<ParkingLotReadDto>>' cannot be used for parameter 'mock' of type 'IReturns<IParkingLotService, Task<ParkingLotReadDto?>>' in 'IReturnsResult<IParkingLotService> ReturnsExtensions.ReturnsAsync<IParkingLotService, ParkingLotReadDto?>(IReturns<IParkingLotService, Task<ParkingLotReadDto?>> mock, ParkingLotReadDto? value)' due to differences in the nullability of reference types.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/ParkingLotAllocationSystem/BackendProjectTests/Controllers/ParkingLotsControllerTests.cs",
                "region": {
                  "startLine": 66,
                  "startColumn": 13,
                  "endLine": 66,
                  "endColumn": 55
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8600",
          "level": "warning",
          "message": "Converting null literal or possible null value to non-nullable type.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/ParkingLotAllocationSystem/BackendProjectTests/Controllers/VehiclesControllerTests.cs",
                "region": {
                  "startLine": 64,
                  "startColumn": 69,
                  "endLine": 64,
                  "endColumn": 89
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8620",
          "level": "warning",
          "message": "Argument of type 'ISetup<IVehicleService, Task<VehicleReadDto>>' cannot be used for parameter 'mock' of type 'IReturns<IVehicleService, Task<VehicleReadDto?>>' in 'IReturnsResult<IVehicleService> ReturnsExtensions.ReturnsAsync<IVehicleService, VehicleReadDto?>(IReturns<IVehicleService, Task<VehicleReadDto?>> mock, VehicleReadDto? value)' due to differences in the nullability of reference types.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/ParkingLotAllocationSystem/BackendProjectTests/Controllers/VehiclesControllerTests.cs",
                "region": {
                  "startLine": 64,
                  "startColumn": 13,
                  "endLine": 64,
                  "endColumn": 55
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8600",
          "level": "warning",
          "message": "Converting null literal or possible null value to non-nullable type.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/ParkingLotAllocationSystem/BackendProjectTests/Service/Implementation/UserServiceTests.cs",
                "region": {
                  "startLine": 99,
                  "startColumn": 66,
                  "endLine": 99,
                  "endColumn": 76
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8620",
          "level": "warning",
          "message": "Argument of type 'ISetup<IGenericRepository<User>, Task<User>>' cannot be used for parameter 'mock' of type 'IReturns<IGenericRepository<User>, Task<User?>>' in 'IReturnsResult<IGenericRepository<User>> ReturnsExtensions.ReturnsAsync<IGenericRepository<User>, User?>(IReturns<IGenericRepository<User>, Task<User?>> mock, User? value)' due to differences in the nullability of reference types.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/ParkingLotAllocationSystem/BackendProjectTests/Service/Implementation/UserServiceTests.cs",
                "region": {
                  "startLine": 99,
                  "startColumn": 13,
                  "endLine": 99,
                  "endColumn": 52
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8600",
          "level": "warning",
          "message": "Converting null literal or possible null value to non-nullable type.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/ParkingLotAllocationSystem/BackendProjectTests/Service/Implementation/ParkingAllocationServiceTests.cs",
                "region": {
                  "startLine": 85,
                  "startColumn": 36,
                  "endLine": 85,
                  "endColumn": 59
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8620",
          "level": "warning",
          "message": "Argument of type 'ISetup<IGenericRepository<ParkingAllocation>, Task<ParkingAllocation>>' cannot be used for parameter 'mock' of type 'IReturns<IGenericRepository<ParkingAllocation>, Task<ParkingAllocation?>>' in 'IReturnsResult<IGenericRepository<ParkingAllocation>> ReturnsExtensions.ReturnsAsync<IGenericRepository<ParkingAllocation>, ParkingAllocation?>(IReturns<IGenericRepository<ParkingAllocation>, Task<ParkingAllocation?>> mock, ParkingAllocation? value)' due to differences in the nullability of reference types.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/ParkingLotAllocationSystem/BackendProjectTests/Service/Implementation/ParkingAllocationServiceTests.cs",
                "region": {
                  "startLine": 84,
                  "startColumn": 13,
                  "endLine": 84,
                  "endColumn": 120
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8602",
          "level": "warning",
          "message": "Dereference of a possibly null reference.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/ParkingLotAllocationSystem/BackendProjectTests/Controllers/VehiclesControllerTests.cs",
                "region": {
                  "startLine": 92,
                  "startColumn": 41,
                  "endLine": 92,
                  "endColumn": 49
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8600",
          "level": "warning",
          "message": "Converting null literal or possible null value to non-nullable type.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/ParkingLotAllocationSystem/BackendProjectTests/Controllers/ParkingAllocationsControllerTests.cs",
                "region": {
                  "startLine": 107,
                  "startColumn": 76,
                  "endLine": 107,
                  "endColumn": 106
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8620",
          "level": "warning",
          "message": "Argument of type 'ISetup<IParkingAllocationService, Task<ParkingAllocationReadDto>>' cannot be used for parameter 'mock' of type 'IReturns<IParkingAllocationService, Task<ParkingAllocationReadDto?>>' in 'IReturnsResult<IParkingAllocationService> ReturnsExtensions.ReturnsAsync<IParkingAllocationService, ParkingAllocationReadDto?>(IReturns<IParkingAllocationService, Task<ParkingAllocationReadDto?>> mock, ParkingAllocationReadDto? value)' due to differences in the nullability of reference types.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/ParkingLotAllocationSystem/BackendProjectTests/Controllers/ParkingAllocationsControllerTests.cs",
                "region": {
                  "startLine": 107,
                  "startColumn": 13,
                  "endLine": 107,
                  "endColumn": 62
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8600",
          "level": "warning",
          "message": "Converting null literal or possible null value to non-nullable type.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/ParkingLotAllocationSystem/BackendProjectTests/Controllers/ParkingLotsControllerTests.cs",
                "region": {
                  "startLine": 113,
                  "startColumn": 73,
                  "endLine": 113,
                  "endColumn": 96
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8620",
          "level": "warning",
          "message": "Argument of type 'ISetup<IParkingLotService, Task<ParkingLotReadDto>>' cannot be used for parameter 'mock' of type 'IReturns<IParkingLotService, Task<ParkingLotReadDto?>>' in 'IReturnsResult<IParkingLotService> ReturnsExtensions.ReturnsAsync<IParkingLotService, ParkingLotReadDto?>(IReturns<IParkingLotService, Task<ParkingLotReadDto?>> mock, ParkingLotReadDto? value)' due to differences in the nullability of reference types.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/ParkingLotAllocationSystem/BackendProjectTests/Controllers/ParkingLotsControllerTests.cs",
                "region": {
                  "startLine": 113,
                  "startColumn": 13,
                  "endLine": 113,
                  "endColumn": 59
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8600",
          "level": "warning",
          "message": "Converting null literal or possible null value to non-nullable type.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/ParkingLotAllocationSystem/BackendProjectTests/Controllers/VehiclesControllerTests.cs",
                "region": {
                  "startLine": 107,
                  "startColumn": 35,
                  "endLine": 107,
                  "endColumn": 70
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8602",
          "level": "warning",
          "message": "Dereference of a possibly null reference.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/ParkingLotAllocationSystem/BackendProjectTests/Controllers/VehiclesControllerTests.cs",
                "region": {
                  "startLine": 107,
                  "startColumn": 35,
                  "endLine": 107,
                  "endColumn": 70
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8600",
          "level": "warning",
          "message": "Converting null literal or possible null value to non-nullable type.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/ParkingLotAllocationSystem/BackendProjectTests/Service/Implementation/ParkingLotServiceTests.cs",
                "region": {
                  "startLine": 144,
                  "startColumn": 66,
                  "endLine": 144,
                  "endColumn": 82
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8620",
          "level": "warning",
          "message": "Argument of type 'ISetup<IGenericRepository<ParkingLot>, Task<ParkingLot>>' cannot be used for parameter 'mock' of type 'IReturns<IGenericRepository<ParkingLot>, Task<ParkingLot?>>' in 'IReturnsResult<IGenericRepository<ParkingLot>> ReturnsExtensions.ReturnsAsync<IGenericRepository<ParkingLot>, ParkingLot?>(IReturns<IGenericRepository<ParkingLot>, Task<ParkingLot?>> mock, ParkingLot? value)' due to differences in the nullability of reference types.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/ParkingLotAllocationSystem/BackendProjectTests/Service/Implementation/ParkingLotServiceTests.cs",
                "region": {
                  "startLine": 144,
                  "startColumn": 13,
                  "endLine": 144,
                  "endColumn": 52
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8602",
          "level": "warning",
          "message": "Dereference of a possibly null reference.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/ParkingLotAllocationSystem/BackendProjectTests/Controllers/UsersControllerTests.cs",
                "region": {
                  "startLine": 120,
                  "startColumn": 30,
                  "endLine": 120,
                  "endColumn": 38
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8602",
          "level": "warning",
          "message": "Dereference of a possibly null reference.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/ParkingLotAllocationSystem/BackendProjectTests/Controllers/UsersControllerTests.cs",
                "region": {
                  "startLine": 120,
                  "startColumn": 30,
                  "endLine": 120,
                  "endColumn": 44
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8602",
          "level": "warning",
          "message": "Dereference of a possibly null reference.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/ParkingLotAllocationSystem/BackendProjectTests/Controllers/VehiclesControllerTests.cs",
                "region": {
                  "startLine": 120,
                  "startColumn": 38,
                  "endLine": 120,
                  "endColumn": 46
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8600",
          "level": "warning",
          "message": "Converting null literal or possible null value to non-nullable type.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/ParkingLotAllocationSystem/BackendProjectTests/Controllers/ParkingAllocationsControllerTests.cs",
                "region": {
                  "startLine": 137,
                  "startColumn": 79,
                  "endLine": 137,
                  "endColumn": 109
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8620",
          "level": "warning",
          "message": "Argument of type 'ISetup<IParkingAllocationService, Task<ParkingAllocationReadDto>>' cannot be used for parameter 'mock' of type 'IReturns<IParkingAllocationService, Task<ParkingAllocationReadDto?>>' in 'IReturnsResult<IParkingAllocationService> ReturnsExtensions.ReturnsAsync<IParkingAllocationService, ParkingAllocationReadDto?>(IReturns<IParkingAllocationService, Task<ParkingAllocationReadDto?>> mock, ParkingAllocationReadDto? value)' due to differences in the nullability of reference types.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/ParkingLotAllocationSystem/BackendProjectTests/Controllers/ParkingAllocationsControllerTests.cs",
                "region": {
                  "startLine": 137,
                  "startColumn": 13,
                  "endLine": 137,
                  "endColumn": 65
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8600",
          "level": "warning",
          "message": "Converting null literal or possible null value to non-nullable type.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/ParkingLotAllocationSystem/BackendProjectTests/Controllers/UsersControllerTests.cs",
                "region": {
                  "startLine": 132,
                  "startColumn": 69,
                  "endLine": 132,
                  "endColumn": 86
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8620",
          "level": "warning",
          "message": "Argument of type 'ISetup<IUserService, Task<UserReadDto>>' cannot be used for parameter 'mock' of type 'IReturns<IUserService, Task<UserReadDto?>>' in 'IReturnsResult<IUserService> ReturnsExtensions.ReturnsAsync<IUserService, UserReadDto?>(IReturns<IUserService, Task<UserReadDto?>> mock, UserReadDto? value)' due to differences in the nullability of reference types.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/ParkingLotAllocationSystem/BackendProjectTests/Controllers/UsersControllerTests.cs",
                "region": {
                  "startLine": 132,
                  "startColumn": 13,
                  "endLine": 132,
                  "endColumn": 55
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8600",
          "level": "warning",
          "message": "Converting null literal or possible null value to non-nullable type.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/ParkingLotAllocationSystem/BackendProjectTests/Controllers/VehiclesControllerTests.cs",
                "region": {
                  "startLine": 125,
                  "startColumn": 98,
                  "endLine": 125,
                  "endColumn": 118
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8620",
          "level": "warning",
          "message": "Argument of type 'ISetup<IVehicleService, Task<VehicleReadDto>>' cannot be used for parameter 'mock' of type 'IReturns<IVehicleService, Task<VehicleReadDto?>>' in 'IReturnsResult<IVehicleService> ReturnsExtensions.ReturnsAsync<IVehicleService, VehicleReadDto?>(IReturns<IVehicleService, Task<VehicleReadDto?>> mock, VehicleReadDto? value)' due to differences in the nullability of reference types.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/ParkingLotAllocationSystem/BackendProjectTests/Controllers/VehiclesControllerTests.cs",
                "region": {
                  "startLine": 125,
                  "startColumn": 13,
                  "endLine": 125,
                  "endColumn": 84
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8600",
          "level": "warning",
          "message": "Converting null literal or possible null value to non-nullable type.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/ParkingLotAllocationSystem/BackendProjectTests/Service/Implementation/VehicleServiceTests.cs",
                "region": {
                  "startLine": 146,
                  "startColumn": 66,
                  "endLine": 146,
                  "endColumn": 79
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8620",
          "level": "warning",
          "message": "Argument of type 'ISetup<IGenericRepository<Vehicle>, Task<Vehicle>>' cannot be used for parameter 'mock' of type 'IReturns<IGenericRepository<Vehicle>, Task<Vehicle?>>' in 'IReturnsResult<IGenericRepository<Vehicle>> ReturnsExtensions.ReturnsAsync<IGenericRepository<Vehicle>, Vehicle?>(IReturns<IGenericRepository<Vehicle>, Task<Vehicle?>> mock, Vehicle? value)' due to differences in the nullability of reference types.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/ParkingLotAllocationSystem/BackendProjectTests/Service/Implementation/VehicleServiceTests.cs",
                "region": {
                  "startLine": 146,
                  "startColumn": 13,
                  "endLine": 146,
                  "endColumn": 52
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8618",
          "level": "warning",
          "message": "Non-nullable field '_mockService' must contain a non-null value when exiting constructor. Consider adding the 'required' modifier or declaring the field as nullable.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/ParkingLotAllocationSystem/BackendProjectTests/Controllers/ParkingLotsControllerTests.cs",
                "region": {
                  "startLine": 20,
                  "startColumn": 42,
                  "endLine": 20,
                  "endColumn": 54
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "physicalLocation": {
                "uri": "file:///C:/ParkingLotAllocationSystem/BackendProjectTests/Controllers/ParkingLotsControllerTests.cs",
                "region": {
                  "startLine": 20,
                  "startColumn": 42,
                  "endLine": 20,
                  "endColumn": 54
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8618",
          "level": "warning",
          "message": "Non-nullable field '_mockLogger' must contain a non-null value when exiting constructor. Consider adding the 'required' modifier or declaring the field as nullable.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/ParkingLotAllocationSystem/BackendProjectTests/Controllers/ParkingLotsControllerTests.cs",
                "region": {
                  "startLine": 21,
                  "startColumn": 54,
                  "endLine": 21,
                  "endColumn": 65
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "physicalLocation": {
                "uri": "file:///C:/ParkingLotAllocationSystem/BackendProjectTests/Controllers/ParkingLotsControllerTests.cs",
                "region": {
                  "startLine": 21,
                  "startColumn": 54,
                  "endLine": 21,
                  "endColumn": 65
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8618",
          "level": "warning",
          "message": "Non-nullable field '_controller' must contain a non-null value when exiting constructor. Consider adding the 'required' modifier or declaring the field as nullable.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/ParkingLotAllocationSystem/BackendProjectTests/Controllers/ParkingLotsControllerTests.cs",
                "region": {
                  "startLine": 22,
                  "startColumn": 39,
                  "endLine": 22,
                  "endColumn": 50
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "physicalLocation": {
                "uri": "file:///C:/ParkingLotAllocationSystem/BackendProjectTests/Controllers/ParkingLotsControllerTests.cs",
                "region": {
                  "startLine": 22,
                  "startColumn": 39,
                  "endLine": 22,
                  "endColumn": 50
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8600",
          "level": "warning",
          "message": "Converting null literal or possible null value to non-nullable type.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/ParkingLotAllocationSystem/BackendProjectTests/Service/Implementation/ParkingLotServiceTests.cs",
                "region": {
                  "startLine": 171,
                  "startColumn": 67,
                  "endLine": 171,
                  "endColumn": 83
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8620",
          "level": "warning",
          "message": "Argument of type 'ISetup<IGenericRepository<ParkingLot>, Task<ParkingLot>>' cannot be used for parameter 'mock' of type 'IReturns<IGenericRepository<ParkingLot>, Task<ParkingLot?>>' in 'IReturnsResult<IGenericRepository<ParkingLot>> ReturnsExtensions.ReturnsAsync<IGenericRepository<ParkingLot>, ParkingLot?>(IReturns<IGenericRepository<ParkingLot>, Task<ParkingLot?>> mock, ParkingLot? value)' due to differences in the nullability of reference types.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/ParkingLotAllocationSystem/BackendProjectTests/Service/Implementation/ParkingLotServiceTests.cs",
                "region": {
                  "startLine": 171,
                  "startColumn": 13,
                  "endLine": 171,
                  "endColumn": 53
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8618",
          "level": "warning",
          "message": "Non-nullable field '_controller' must contain a non-null value when exiting constructor. Consider adding the 'required' modifier or declaring the field as nullable.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/ParkingLotAllocationSystem/BackendProjectTests/Controllers/VehiclesControllerTests.cs",
                "region": {
                  "startLine": 13,
                  "startColumn": 36,
                  "endLine": 13,
                  "endColumn": 47
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "physicalLocation": {
                "uri": "file:///C:/ParkingLotAllocationSystem/BackendProjectTests/Controllers/VehiclesControllerTests.cs",
                "region": {
                  "startLine": 13,
                  "startColumn": 36,
                  "endLine": 13,
                  "endColumn": 47
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8618",
          "level": "warning",
          "message": "Non-nullable field '_mockService' must contain a non-null value when exiting constructor. Consider adding the 'required' modifier or declaring the field as nullable.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/ParkingLotAllocationSystem/BackendProjectTests/Controllers/VehiclesControllerTests.cs",
                "region": {
                  "startLine": 14,
                  "startColumn": 39,
                  "endLine": 14,
                  "endColumn": 51
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "physicalLocation": {
                "uri": "file:///C:/ParkingLotAllocationSystem/BackendProjectTests/Controllers/VehiclesControllerTests.cs",
                "region": {
                  "startLine": 14,
                  "startColumn": 39,
                  "endLine": 14,
                  "endColumn": 51
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8618",
          "level": "warning",
          "message": "Non-nullable field '_mockLogger' must contain a non-null value when exiting constructor. Consider adding the 'required' modifier or declaring the field as nullable.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/ParkingLotAllocationSystem/BackendProjectTests/Controllers/VehiclesControllerTests.cs",
                "region": {
                  "startLine": 15,
                  "startColumn": 51,
                  "endLine": 15,
                  "endColumn": 62
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "physicalLocation": {
                "uri": "file:///C:/ParkingLotAllocationSystem/BackendProjectTests/Controllers/VehiclesControllerTests.cs",
                "region": {
                  "startLine": 15,
                  "startColumn": 51,
                  "endLine": 15,
                  "endColumn": 62
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8618",
          "level": "warning",
          "message": "Non-nullable field '_mockRepo' must contain a non-null value when exiting constructor. Consider adding the 'required' modifier or declaring the field as nullable.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/ParkingLotAllocationSystem/BackendProjectTests/Service/Implementation/ParkingLotServiceTests.cs",
                "region": {
                  "startLine": 22,
                  "startColumn": 54,
                  "endLine": 22,
                  "endColumn": 63
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "physicalLocation": {
                "uri": "file:///C:/ParkingLotAllocationSystem/BackendProjectTests/Service/Implementation/ParkingLotServiceTests.cs",
                "region": {
                  "startLine": 22,
                  "startColumn": 54,
                  "endLine": 22,
                  "endColumn": 63
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8618",
          "level": "warning",
          "message": "Non-nullable field '_mockLotRepo' must contain a non-null value when exiting constructor. Consider adding the 'required' modifier or declaring the field as nullable.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/ParkingLotAllocationSystem/BackendProjectTests/Service/Implementation/ParkingLotServiceTests.cs",
                "region": {
                  "startLine": 23,
                  "startColumn": 45,
                  "endLine": 23,
                  "endColumn": 57
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "physicalLocation": {
                "uri": "file:///C:/ParkingLotAllocationSystem/BackendProjectTests/Service/Implementation/ParkingLotServiceTests.cs",
                "region": {
                  "startLine": 23,
                  "startColumn": 45,
                  "endLine": 23,
                  "endColumn": 57
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8618",
          "level": "warning",
          "message": "Non-nullable field '_mockMapper' must contain a non-null value when exiting constructor. Consider adding the 'required' modifier or declaring the field as nullable.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/ParkingLotAllocationSystem/BackendProjectTests/Service/Implementation/ParkingLotServiceTests.cs",
                "region": {
                  "startLine": 24,
                  "startColumn": 31,
                  "endLine": 24,
                  "endColumn": 42
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "physicalLocation": {
                "uri": "file:///C:/ParkingLotAllocationSystem/BackendProjectTests/Service/Implementation/ParkingLotServiceTests.cs",
                "region": {
                  "startLine": 24,
                  "startColumn": 31,
                  "endLine": 24,
                  "endColumn": 42
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8618",
          "level": "warning",
          "message": "Non-nullable field '_mockLogger' must contain a non-null value when exiting constructor. Consider adding the 'required' modifier or declaring the field as nullable.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/ParkingLotAllocationSystem/BackendProjectTests/Service/Implementation/ParkingLotServiceTests.cs",
                "region": {
                  "startLine": 25,
                  "startColumn": 50,
                  "endLine": 25,
                  "endColumn": 61
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "physicalLocation": {
                "uri": "file:///C:/ParkingLotAllocationSystem/BackendProjectTests/Service/Implementation/ParkingLotServiceTests.cs",
                "region": {
                  "startLine": 25,
                  "startColumn": 50,
                  "endLine": 25,
                  "endColumn": 61
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8618",
          "level": "warning",
          "message": "Non-nullable field '_service' must contain a non-null value when exiting constructor. Consider adding the 'required' modifier or declaring the field as nullable.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/ParkingLotAllocationSystem/BackendProjectTests/Service/Implementation/ParkingLotServiceTests.cs",
                "region": {
                  "startLine": 27,
                  "startColumn": 35,
                  "endLine": 27,
                  "endColumn": 43
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "physicalLocation": {
                "uri": "file:///C:/ParkingLotAllocationSystem/BackendProjectTests/Service/Implementation/ParkingLotServiceTests.cs",
                "region": {
                  "startLine": 27,
                  "startColumn": 35,
                  "endLine": 27,
                  "endColumn": 43
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8600",
          "level": "warning",
          "message": "Converting null literal or possible null value to non-nullable type.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/ParkingLotAllocationSystem/BackendProjectTests/Controllers/UsersControllerTests.cs",
                "region": {
                  "startLine": 169,
                  "startColumn": 41,
                  "endLine": 169,
                  "endColumn": 62
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8602",
          "level": "warning",
          "message": "Dereference of a possibly null reference.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/ParkingLotAllocationSystem/BackendProjectTests/Controllers/UsersControllerTests.cs",
                "region": {
                  "startLine": 169,
                  "startColumn": 41,
                  "endLine": 169,
                  "endColumn": 62
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8618",
          "level": "warning",
          "message": "Non-nullable field '_mockService' must contain a non-null value when exiting constructor. Consider adding the 'required' modifier or declaring the field as nullable.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/ParkingLotAllocationSystem/BackendProjectTests/Controllers/ParkingAllocationsControllerTests.cs",
                "region": {
                  "startLine": 19,
                  "startColumn": 49,
                  "endLine": 19,
                  "endColumn": 61
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "physicalLocation": {
                "uri": "file:///C:/ParkingLotAllocationSystem/BackendProjectTests/Controllers/ParkingAllocationsControllerTests.cs",
                "region": {
                  "startLine": 19,
                  "startColumn": 49,
                  "endLine": 19,
                  "endColumn": 61
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8618",
          "level": "warning",
          "message": "Non-nullable field '_mockLogger' must contain a non-null value when exiting constructor. Consider adding the 'required' modifier or declaring the field as nullable.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/ParkingLotAllocationSystem/BackendProjectTests/Controllers/ParkingAllocationsControllerTests.cs",
                "region": {
                  "startLine": 20,
                  "startColumn": 61,
                  "endLine": 20,
                  "endColumn": 72
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "physicalLocation": {
                "uri": "file:///C:/ParkingLotAllocationSystem/BackendProjectTests/Controllers/ParkingAllocationsControllerTests.cs",
                "region": {
                  "startLine": 20,
                  "startColumn": 61,
                  "endLine": 20,
                  "endColumn": 72
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8618",
          "level": "warning",
          "message": "Non-nullable field '_controller' must contain a non-null value when exiting constructor. Consider adding the 'required' modifier or declaring the field as nullable.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/ParkingLotAllocationSystem/BackendProjectTests/Controllers/ParkingAllocationsControllerTests.cs",
                "region": {
                  "startLine": 21,
                  "startColumn": 46,
                  "endLine": 21,
                  "endColumn": 57
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "physicalLocation": {
                "uri": "file:///C:/ParkingLotAllocationSystem/BackendProjectTests/Controllers/ParkingAllocationsControllerTests.cs",
                "region": {
                  "startLine": 21,
                  "startColumn": 46,
                  "endLine": 21,
                  "endColumn": 57
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8600",
          "level": "warning",
          "message": "Converting null literal or possible null value to non-nullable type.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/ParkingLotAllocationSystem/BackendProjectTests/Service/Implementation/ParkingAllocationServiceTests.cs",
                "region": {
                  "startLine": 208,
                  "startColumn": 31,
                  "endLine": 208,
                  "endColumn": 54
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8620",
          "level": "warning",
          "message": "Argument of type 'ISetup<IGenericRepository<ParkingAllocation>, Task<ParkingAllocation>>' cannot be used for parameter 'mock' of type 'IReturns<IGenericRepository<ParkingAllocation>, Task<ParkingAllocation?>>' in 'IReturnsResult<IGenericRepository<ParkingAllocation>> ReturnsExtensions.ReturnsAsync<IGenericRepository<ParkingAllocation>, ParkingAllocation?>(IReturns<IGenericRepository<ParkingAllocation>, Task<ParkingAllocation?>> mock, ParkingAllocation? value)' due to differences in the nullability of reference types.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/ParkingLotAllocationSystem/BackendProjectTests/Service/Implementation/ParkingAllocationServiceTests.cs",
                "region": {
                  "startLine": 206,
                  "startColumn": 13,
                  "endLine": 207,
                  "endColumn": 115
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8618",
          "level": "warning",
          "message": "Non-nullable field '_mockRepo' must contain a non-null value when exiting constructor. Consider adding the 'required' modifier or declaring the field as nullable.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/ParkingLotAllocationSystem/BackendProjectTests/Service/Implementation/ParkingAllocationServiceTests.cs",
                "region": {
                  "startLine": 20,
                  "startColumn": 61,
                  "endLine": 20,
                  "endColumn": 70
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "physicalLocation": {
                "uri": "file:///C:/ParkingLotAllocationSystem/BackendProjectTests/Service/Implementation/ParkingAllocationServiceTests.cs",
                "region": {
                  "startLine": 20,
                  "startColumn": 61,
                  "endLine": 20,
                  "endColumn": 70
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8618",
          "level": "warning",
          "message": "Non-nullable field '_mockMapper' must contain a non-null value when exiting constructor. Consider adding the 'required' modifier or declaring the field as nullable.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/ParkingLotAllocationSystem/BackendProjectTests/Service/Implementation/ParkingAllocationServiceTests.cs",
                "region": {
                  "startLine": 21,
                  "startColumn": 31,
                  "endLine": 21,
                  "endColumn": 42
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "physicalLocation": {
                "uri": "file:///C:/ParkingLotAllocationSystem/BackendProjectTests/Service/Implementation/ParkingAllocationServiceTests.cs",
                "region": {
                  "startLine": 21,
                  "startColumn": 31,
                  "endLine": 21,
                  "endColumn": 42
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8618",
          "level": "warning",
          "message": "Non-nullable field '_service' must contain a non-null value when exiting constructor. Consider adding the 'required' modifier or declaring the field as nullable.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/ParkingLotAllocationSystem/BackendProjectTests/Service/Implementation/ParkingAllocationServiceTests.cs",
                "region": {
                  "startLine": 22,
                  "startColumn": 42,
                  "endLine": 22,
                  "endColumn": 50
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "physicalLocation": {
                "uri": "file:///C:/ParkingLotAllocationSystem/BackendProjectTests/Service/Implementation/ParkingAllocationServiceTests.cs",
                "region": {
                  "startLine": 22,
                  "startColumn": 42,
                  "endLine": 22,
                  "endColumn": 50
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8600",
          "level": "warning",
          "message": "Converting null literal or possible null value to non-nullable type.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/ParkingLotAllocationSystem/BackendProjectTests/Controllers/UsersControllerTests.cs",
                "region": {
                  "startLine": 177,
                  "startColumn": 79,
                  "endLine": 177,
                  "endColumn": 96
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8620",
          "level": "warning",
          "message": "Argument of type 'ISetup<IUserService, Task<UserReadDto>>' cannot be used for parameter 'mock' of type 'IReturns<IUserService, Task<UserReadDto?>>' in 'IReturnsResult<IUserService> ReturnsExtensions.ReturnsAsync<IUserService, UserReadDto?>(IReturns<IUserService, Task<UserReadDto?>> mock, UserReadDto? value)' due to differences in the nullability of reference types.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/ParkingLotAllocationSystem/BackendProjectTests/Controllers/UsersControllerTests.cs",
                "region": {
                  "startLine": 177,
                  "startColumn": 13,
                  "endLine": 177,
                  "endColumn": 65
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8618",
          "level": "warning",
          "message": "Non-nullable field '_mockService' must contain a non-null value when exiting constructor. Consider adding the 'required' modifier or declaring the field as nullable.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/ParkingLotAllocationSystem/BackendProjectTests/Controllers/UsersControllerTests.cs",
                "region": {
                  "startLine": 15,
                  "startColumn": 36,
                  "endLine": 15,
                  "endColumn": 48
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "physicalLocation": {
                "uri": "file:///C:/ParkingLotAllocationSystem/BackendProjectTests/Controllers/UsersControllerTests.cs",
                "region": {
                  "startLine": 15,
                  "startColumn": 36,
                  "endLine": 15,
                  "endColumn": 48
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8618",
          "level": "warning",
          "message": "Non-nullable field '_mockJwt' must contain a non-null value when exiting constructor. Consider adding the 'required' modifier or declaring the field as nullable.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/ParkingLotAllocationSystem/BackendProjectTests/Controllers/UsersControllerTests.cs",
                "region": {
                  "startLine": 16,
                  "startColumn": 35,
                  "endLine": 16,
                  "endColumn": 43
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "physicalLocation": {
                "uri": "file:///C:/ParkingLotAllocationSystem/BackendProjectTests/Controllers/UsersControllerTests.cs",
                "region": {
                  "startLine": 16,
                  "startColumn": 35,
                  "endLine": 16,
                  "endColumn": 43
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8618",
          "level": "warning",
          "message": "Non-nullable field '_mockLogger' must contain a non-null value when exiting constructor. Consider adding the 'required' modifier or declaring the field as nullable.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/ParkingLotAllocationSystem/BackendProjectTests/Controllers/UsersControllerTests.cs",
                "region": {
                  "startLine": 18,
                  "startColumn": 48,
                  "endLine": 18,
                  "endColumn": 59
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "physicalLocation": {
                "uri": "file:///C:/ParkingLotAllocationSystem/BackendProjectTests/Controllers/UsersControllerTests.cs",
                "region": {
                  "startLine": 18,
                  "startColumn": 48,
                  "endLine": 18,
                  "endColumn": 59
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8618",
          "level": "warning",
          "message": "Non-nullable field '_controller' must contain a non-null value when exiting constructor. Consider adding the 'required' modifier or declaring the field as nullable.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/ParkingLotAllocationSystem/BackendProjectTests/Controllers/UsersControllerTests.cs",
                "region": {
                  "startLine": 19,
                  "startColumn": 33,
                  "endLine": 19,
                  "endColumn": 44
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "physicalLocation": {
                "uri": "file:///C:/ParkingLotAllocationSystem/BackendProjectTests/Controllers/UsersControllerTests.cs",
                "region": {
                  "startLine": 19,
                  "startColumn": 33,
                  "endLine": 19,
                  "endColumn": 44
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8600",
          "level": "warning",
          "message": "Converting null literal or possible null value to non-nullable type.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/ParkingLotAllocationSystem/BackendProjectTests/Service/Implementation/UserServiceTests.cs",
                "region": {
                  "startLine": 200,
                  "startColumn": 66,
                  "endLine": 200,
                  "endColumn": 76
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8620",
          "level": "warning",
          "message": "Argument of type 'ISetup<IGenericRepository<User>, Task<User>>' cannot be used for parameter 'mock' of type 'IReturns<IGenericRepository<User>, Task<User?>>' in 'IReturnsResult<IGenericRepository<User>> ReturnsExtensions.ReturnsAsync<IGenericRepository<User>, User?>(IReturns<IGenericRepository<User>, Task<User?>> mock, User? value)' due to differences in the nullability of reference types.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/ParkingLotAllocationSystem/BackendProjectTests/Service/Implementation/UserServiceTests.cs",
                "region": {
                  "startLine": 200,
                  "startColumn": 13,
                  "endLine": 200,
                  "endColumn": 52
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8600",
          "level": "warning",
          "message": "Converting null literal or possible null value to non-nullable type.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/ParkingLotAllocationSystem/BackendProjectTests/Service/Implementation/VehicleServiceTests.cs",
                "region": {
                  "startLine": 173,
                  "startColumn": 66,
                  "endLine": 173,
                  "endColumn": 79
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8620",
          "level": "warning",
          "message": "Argument of type 'ISetup<IGenericRepository<Vehicle>, Task<Vehicle>>' cannot be used for parameter 'mock' of type 'IReturns<IGenericRepository<Vehicle>, Task<Vehicle?>>' in 'IReturnsResult<IGenericRepository<Vehicle>> ReturnsExtensions.ReturnsAsync<IGenericRepository<Vehicle>, Vehicle?>(IReturns<IGenericRepository<Vehicle>, Task<Vehicle?>> mock, Vehicle? value)' due to differences in the nullability of reference types.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/ParkingLotAllocationSystem/BackendProjectTests/Service/Implementation/VehicleServiceTests.cs",
                "region": {
                  "startLine": 173,
                  "startColumn": 13,
                  "endLine": 173,
                  "endColumn": 52
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8618",
          "level": "warning",
          "message": "Non-nullable field '_mockRepo' must contain a non-null value when exiting constructor. Consider adding the 'required' modifier or declaring the field as nullable.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/ParkingLotAllocationSystem/BackendProjectTests/Service/Implementation/VehicleServiceTests.cs",
                "region": {
                  "startLine": 21,
                  "startColumn": 51,
                  "endLine": 21,
                  "endColumn": 60
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "physicalLocation": {
                "uri": "file:///C:/ParkingLotAllocationSystem/BackendProjectTests/Service/Implementation/VehicleServiceTests.cs",
                "region": {
                  "startLine": 21,
                  "startColumn": 51,
                  "endLine": 21,
                  "endColumn": 60
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8618",
          "level": "warning",
          "message": "Non-nullable field '_mockVehicleRepo' must contain a non-null value when exiting constructor. Consider adding the 'required' modifier or declaring the field as nullable.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/ParkingLotAllocationSystem/BackendProjectTests/Service/Implementation/VehicleServiceTests.cs",
                "region": {
                  "startLine": 22,
                  "startColumn": 42,
                  "endLine": 22,
                  "endColumn": 58
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "physicalLocation": {
                "uri": "file:///C:/ParkingLotAllocationSystem/BackendProjectTests/Service/Implementation/VehicleServiceTests.cs",
                "region": {
                  "startLine": 22,
                  "startColumn": 42,
                  "endLine": 22,
                  "endColumn": 58
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8618",
          "level": "warning",
          "message": "Non-nullable field '_mockMapper' must contain a non-null value when exiting constructor. Consider adding the 'required' modifier or declaring the field as nullable.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/ParkingLotAllocationSystem/BackendProjectTests/Service/Implementation/VehicleServiceTests.cs",
                "region": {
                  "startLine": 23,
                  "startColumn": 31,
                  "endLine": 23,
                  "endColumn": 42
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "physicalLocation": {
                "uri": "file:///C:/ParkingLotAllocationSystem/BackendProjectTests/Service/Implementation/VehicleServiceTests.cs",
                "region": {
                  "startLine": 23,
                  "startColumn": 31,
                  "endLine": 23,
                  "endColumn": 42
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8618",
          "level": "warning",
          "message": "Non-nullable field '_mockLogger' must contain a non-null value when exiting constructor. Consider adding the 'required' modifier or declaring the field as nullable.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/ParkingLotAllocationSystem/BackendProjectTests/Service/Implementation/VehicleServiceTests.cs",
                "region": {
                  "startLine": 24,
                  "startColumn": 47,
                  "endLine": 24,
                  "endColumn": 58
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "physicalLocation": {
                "uri": "file:///C:/ParkingLotAllocationSystem/BackendProjectTests/Service/Implementation/VehicleServiceTests.cs",
                "region": {
                  "startLine": 24,
                  "startColumn": 47,
                  "endLine": 24,
                  "endColumn": 58
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8618",
          "level": "warning",
          "message": "Non-nullable field '_service' must contain a non-null value when exiting constructor. Consider adding the 'required' modifier or declaring the field as nullable.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/ParkingLotAllocationSystem/BackendProjectTests/Service/Implementation/VehicleServiceTests.cs",
                "region": {
                  "startLine": 25,
                  "startColumn": 32,
                  "endLine": 25,
                  "endColumn": 40
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "physicalLocation": {
                "uri": "file:///C:/ParkingLotAllocationSystem/BackendProjectTests/Service/Implementation/VehicleServiceTests.cs",
                "region": {
                  "startLine": 25,
                  "startColumn": 32,
                  "endLine": 25,
                  "endColumn": 40
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8618",
          "level": "warning",
          "message": "Non-nullable field '_mockRepo' must contain a non-null value when exiting constructor. Consider adding the 'required' modifier or declaring the field as nullable.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/ParkingLotAllocationSystem/BackendProjectTests/Service/Implementation/UserServiceTests.cs",
                "region": {
                  "startLine": 15,
                  "startColumn": 48,
                  "endLine": 15,
                  "endColumn": 57
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "physicalLocation": {
                "uri": "file:///C:/ParkingLotAllocationSystem/BackendProjectTests/Service/Implementation/UserServiceTests.cs",
                "region": {
                  "startLine": 15,
                  "startColumn": 48,
                  "endLine": 15,
                  "endColumn": 57
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8618",
          "level": "warning",
          "message": "Non-nullable field '_mockMapper' must contain a non-null value when exiting constructor. Consider adding the 'required' modifier or declaring the field as nullable.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/ParkingLotAllocationSystem/BackendProjectTests/Service/Implementation/UserServiceTests.cs",
                "region": {
                  "startLine": 16,
                  "startColumn": 31,
                  "endLine": 16,
                  "endColumn": 42
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "physicalLocation": {
                "uri": "file:///C:/ParkingLotAllocationSystem/BackendProjectTests/Service/Implementation/UserServiceTests.cs",
                "region": {
                  "startLine": 16,
                  "startColumn": 31,
                  "endLine": 16,
                  "endColumn": 42
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8618",
          "level": "warning",
          "message": "Non-nullable field '_mockLogger' must contain a non-null value when exiting constructor. Consider adding the 'required' modifier or declaring the field as nullable.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/ParkingLotAllocationSystem/BackendProjectTests/Service/Implementation/UserServiceTests.cs",
                "region": {
                  "startLine": 17,
                  "startColumn": 44,
                  "endLine": 17,
                  "endColumn": 55
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "physicalLocation": {
                "uri": "file:///C:/ParkingLotAllocationSystem/BackendProjectTests/Service/Implementation/UserServiceTests.cs",
                "region": {
                  "startLine": 17,
                  "startColumn": 44,
                  "endLine": 17,
                  "endColumn": 55
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8618",
          "level": "warning",
          "message": "Non-nullable field '_service' must contain a non-null value when exiting constructor. Consider adding the 'required' modifier or declaring the field as nullable.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/ParkingLotAllocationSystem/BackendProjectTests/Service/Implementation/UserServiceTests.cs",
                "region": {
                  "startLine": 18,
                  "startColumn": 29,
                  "endLine": 18,
                  "endColumn": 37
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "physicalLocation": {
                "uri": "file:///C:/ParkingLotAllocationSystem/BackendProjectTests/Service/Implementation/UserServiceTests.cs",
                "region": {
                  "startLine": 18,
                  "startColumn": 29,
                  "endLine": 18,
                  "endColumn": 37
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA1829",
          "level": "note",
          "message": "Use the \"Count\" property instead of Enumerable.Count()",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/ParkingLotAllocationSystem/BackendProjectTests/Service/Implementation/UserServiceTests.cs",
                "region": {
                  "startLine": 51,
                  "startColumn": 29,
                  "endLine": 51,
                  "endColumn": 42
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "PropertyNameKey": "Count"
            }
          }
        },
        {
          "ruleId": "CA1829",
          "level": "note",
          "message": "Use the \"Count\" property instead of Enumerable.Count()",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/ParkingLotAllocationSystem/BackendProjectTests/Service/Implementation/UserServiceTests.cs",
                "region": {
                  "startLine": 51,
                  "startColumn": 44,
                  "endLine": 51,
                  "endColumn": 58
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "PropertyNameKey": "Count"
            }
          }
        },
        {
          "ruleId": "CA1829",
          "level": "note",
          "message": "Use the \"Count\" property instead of Enumerable.Count()",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/ParkingLotAllocationSystem/BackendProjectTests/Service/Implementation/UserServiceTests.cs",
                "region": {
                  "startLine": 75,
                  "startColumn": 32,
                  "endLine": 75,
                  "endColumn": 45
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "PropertyNameKey": "Count"
            }
          }
        },
        {
          "ruleId": "CA1829",
          "level": "note",
          "message": "Use the \"Count\" property instead of Enumerable.Count()",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/ParkingLotAllocationSystem/BackendProjectTests/Service/Implementation/UserServiceTests.cs",
                "region": {
                  "startLine": 75,
                  "startColumn": 47,
                  "endLine": 75,
                  "endColumn": 61
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "PropertyNameKey": "Count"
            }
          }
        },
        {
          "ruleId": "MSTEST0037",
          "level": "note",
          "message": "Use 'Assert.HasCount' instead of 'Assert.AreEqual'",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/ParkingLotAllocationSystem/BackendProjectTests/Service/Implementation/ParkingLotServiceTests.cs",
                "region": {
                  "startLine": 83,
                  "startColumn": 13,
                  "endLine": 83,
                  "endColumn": 45
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "physicalLocation": {
                "uri": "file:///C:/ParkingLotAllocationSystem/BackendProjectTests/Service/Implementation/ParkingLotServiceTests.cs",
                "region": {
                  "startLine": 83,
                  "startColumn": 29,
                  "endLine": 83,
                  "endColumn": 30
                }
              }
            },
            {
              "physicalLocation": {
                "uri": "file:///C:/ParkingLotAllocationSystem/BackendProjectTests/Service/Implementation/ParkingLotServiceTests.cs",
                "region": {
                  "startLine": 83,
                  "startColumn": 32,
                  "endLine": 83,
                  "endColumn": 44
                }
              }
            },
            {
              "physicalLocation": {
                "uri": "file:///C:/ParkingLotAllocationSystem/BackendProjectTests/Service/Implementation/ParkingLotServiceTests.cs",
                "region": {
                  "startLine": 83,
                  "startColumn": 32,
                  "endLine": 83,
                  "endColumn": 38
                }
              }
            },
            {
              "physicalLocation": {
                "uri": "file:///C:/ParkingLotAllocationSystem/BackendProjectTests/Service/Implementation/ParkingLotServiceTests.cs",
                "region": {
                  "startLine": 83,
                  "startColumn": 29,
                  "endLine": 83,
                  "endColumn": 30
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "CodeFixModeKey": "CodeFixModeCollectionCount",
              "ProperAssertMethodNameKey": "HasCount"
            }
          }
        },
        {
          "ruleId": "MSTEST0039",
          "level": "warning",
          "message": "Use 'Assert.ThrowsExactly' instead of 'Assert.ThrowsException'",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/ParkingLotAllocationSystem/BackendProjectTests/Service/Implementation/ParkingLotServiceTests.cs",
                "region": {
                  "startLine": 107,
                  "startColumn": 19,
                  "endLine": 110,
                  "endColumn": 15
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "MSTEST0006",
          "level": "warning",
          "message": "Prefer 'Assert.ThrowsExactly/ThrowsExactlyAsync' over '[ExpectedException]'",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/ParkingLotAllocationSystem/BackendProjectTests/Service/Implementation/VehicleServiceTests.cs",
                "region": {
                  "startLine": 121,
                  "startColumn": 27,
                  "endLine": 121,
                  "endColumn": 78
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S3431",
          "level": "warning",
          "message": "Replace the 'ExpectedException' attribute with a throw assertion or a try/catch block.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/ParkingLotAllocationSystem/BackendProjectTests/Service/Implementation/VehicleServiceTests.cs",
                "region": {
                  "startLine": 120,
                  "startColumn": 10,
                  "endLine": 120,
                  "endColumn": 62
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "MSTEST0006",
          "level": "warning",
          "message": "Prefer 'Assert.ThrowsExactly/ThrowsExactlyAsync' over '[ExpectedException]'",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/ParkingLotAllocationSystem/BackendProjectTests/Service/Implementation/ParkingAllocationServiceTests.cs",
                "region": {
                  "startLine": 133,
                  "startColumn": 27,
                  "endLine": 133,
                  "endColumn": 79
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S3431",
          "level": "warning",
          "message": "Replace the 'ExpectedException' attribute with a throw assertion or a try/catch block.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/ParkingLotAllocationSystem/BackendProjectTests/Service/Implementation/ParkingAllocationServiceTests.cs",
                "region": {
                  "startLine": 132,
                  "startColumn": 10,
                  "endLine": 132,
                  "endColumn": 58
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        }
      ],
      "rules": {
        "CA1829": {
          "id": "CA1829",
          "shortDescription": "Use Length/Count property instead of Count() when available",
          "fullDescription": "Enumerable.Count() potentially enumerates the sequence while a Length/Count property is a direct access.",
          "defaultLevel": "note",
          "helpUri": "https://learn.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1829",
          "properties": {
            "category": "Performance",
            "isEnabledByDefault": true,
            "tags": [
              "Telemetry",
              "EnabledRuleInAggressiveMode"
            ]
          }
        },
        "CS8600": {
          "id": "CS8600",
          "shortDescription": "Converting null literal or possible null value to non-nullable type.",
          "defaultLevel": "warning",
          "helpUri": "https://msdn.microsoft.com/query/roslyn.query?appId=roslyn&k=k(CS8600)",
          "properties": {
            "category": "Compiler",
            "isEnabledByDefault": true,
            "tags": [
              "Compiler",
              "Telemetry"
            ]
          }
        },
        "CS8602": {
          "id": "CS8602",
          "shortDescription": "Dereference of a possibly null reference.",
          "defaultLevel": "warning",
          "helpUri": "https://msdn.microsoft.com/query/roslyn.query?appId=roslyn&k=k(CS8602)",
          "properties": {
            "category": "Compiler",
            "isEnabledByDefault": true,
            "tags": [
              "Compiler",
              "Telemetry"
            ]
          }
        },
        "CS8618": {
          "id": "CS8618",
          "shortDescription": "Non-nullable field must contain a non-null value when exiting constructor. Consider adding the 'required' modifier or declaring as nullable.",
          "defaultLevel": "warning",
          "helpUri": "https://msdn.microsoft.com/query/roslyn.query?appId=roslyn&k=k(CS8618)",
          "properties": {
            "category": "Compiler",
            "isEnabledByDefault": true,
            "tags": [
              "Compiler",
              "Telemetry"
            ]
          }
        },
        "CS8620": {
          "id": "CS8620",
          "shortDescription": "Argument cannot be used for parameter due to differences in the nullability of reference types.",
          "defaultLevel": "warning",
          "helpUri": "https://msdn.microsoft.com/query/roslyn.query?appId=roslyn&k=k(CS8620)",
          "properties": {
            "category": "Compiler",
            "isEnabledByDefault": true,
            "tags": [
              "Compiler",
              "Telemetry"
            ]
          }
        },
        "MSTEST0006": {
          "id": "MSTEST0006",
          "shortDescription": "Avoid '[ExpectedException]'",
          "fullDescription": "Prefer 'Assert.ThrowsExactly' or 'Assert.ThrowsExactlyAsync' over '[ExpectedException]' as it ensures that only the expected call throws the expected exception. The assert APIs also provide more flexibility and allow you to assert extra properties of the exception.",
          "defaultLevel": "warning",
          "helpUri": "https://learn.microsoft.com/dotnet/core/testing/mstest-analyzers/mstest0006",
          "properties": {
            "category": "Design",
            "isEnabledByDefault": true
          }
        },
        "MSTEST0037": {
          "id": "MSTEST0037",
          "shortDescription": "Use proper 'Assert' methods",
          "defaultLevel": "note",
          "helpUri": "https://learn.microsoft.com/dotnet/core/testing/mstest-analyzers/mstest0037",
          "properties": {
            "category": "Usage",
            "isEnabledByDefault": true
          }
        },
        "MSTEST0039": {
          "id": "MSTEST0039",
          "shortDescription": "Use newer methods to assert exceptions",
          "defaultLevel": "warning",
          "helpUri": "https://learn.microsoft.com/dotnet/core/testing/mstest-analyzers/mstest0039",
          "properties": {
            "category": "Usage",
            "isEnabledByDefault": true
          }
        },
        "S3431": {
          "id": "S3431",
          "shortDescription": "\"[ExpectedException]\" should not be used",
          "fullDescription": "It should be clear to a casual reader what code a test is testing and what results are expected. Unfortunately, that’s not usually the case with the ExpectedException attribute since an exception could be thrown from almost any line in the method.",
          "defaultLevel": "warning",
          "helpUri": "https://rules.sonarsource.com/csharp/RSPEC-3431",
          "properties": {
            "category": "Major Code Smell",
            "isEnabledByDefault": true,
            "tags": [
              "C#",
              "TestSourceScope",
              "SonarWay"
            ]
          }
        }
      }
    }
  ]
}